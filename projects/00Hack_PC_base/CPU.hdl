/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
    PC(in=arOut, load=jmpOut, reset=reset, inc=true, out[0..14]=pc);
    DMux16(in=instruction, sel=instruction[15], a=aOut, b=cOut, b[12]=cOut12, b[11]=cOut11, b[10]=cOut10, b[9]=cOut9, b[8]=cOut8, b[7]=cOut7, b[6]=cOut6, b[5]=cOut5, b[4]=cOut4, b[3]=writeM, b[0..2]=jmp);
    Mux(a=true, b=cOut5, sel=instruction[15], out=aLoad);
    Mux16(a=aOut, b=aluOut, sel=instruction[15], out=aIn);
    ARegister(in=aIn, load=aLoad, out=arOut, out[0..14]=addressM);                       
    DRegister(in=aluOut, load=cOut4, out=drOut);                                         
    Mux16(a=arOut, b=inM, sel=cOut12, out=in2);
    ALU(x=drOut ,y=in2 ,zx=cOut11 ,nx=cOut10 ,zy=cOut9 ,ny=cOut8 ,f=cOut7 ,no=cOut6 ,out=aluOut, out=outM ,zr=zr ,ng=ng);
    Jump(zr=zr, ng=ng, jmp=jmp, out=jmpOut);

}